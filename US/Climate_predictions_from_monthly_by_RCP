/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[-126.26524325364272, 54.29055904521286],
              [-126.26524325364272, 23.079223290896834],
              [-66.23594637864272, 23.079223290896834],
              [-66.23594637864272, 54.29055904521286]]], null, false),
        {
          "system:index": "0"
        });
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Get climate model rasters
var dataset2000 = ee.ImageCollection('IDAHO_EPSCOR/MACAv2_METDATA_MONTHLY')
                  .filter(ee.Filter.date('2000-01-01', '2000-12-30'))
                  .filterMetadata('scenario','equals','historical')
                  .filterMetadata('model','equals','HadGEM2-ES365');
var raster2000 = dataset2000.select('tasmax')
                 .median();
//var raster2000 = dataset2000.select('pr')
//                 .sum();

var dataset2050 = ee.ImageCollection('IDAHO_EPSCOR/MACAv2_METDATA_MONTHLY')
                  .filter(ee.Filter.date('2050-01-01', '2050-12-30'))
                  .filterMetadata('scenario','equals','rcp45')
                  .filterMetadata('model','equals','HadGEM2-ES365');
var raster2050 = dataset2050.select('tasmax')
                 .median();
//var raster2050 = dataset2050.select('pr')
//                 .sum();

var monthlyAirTemperatureVis = {
  min: 247.0,
  max: 311.0,
  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],
};

var monthlyPrecipVis = {
  min: 0,
  max: 3691.91,
  palette: ['red','yellow','green','cyan','purple','blue'],
};

//Map.setCenter(-115.356, 38.686, 5);
Map.addLayer(
    raster2000, monthlyAirTemperatureVis,
    '2000'); 
Map.addLayer(
    raster2050, monthlyAirTemperatureVis,
    '2050');

  
Export.image.toDrive({
  image: raster2050,
  description: 'yearlyTemp2050',
  scale: 5000,
  region: geometry.geometry().bounds(),
  skipEmptyTiles: true
}) 

Export.image.toDrive({
  image: raster2000,
  description: 'yearlyTemp2000',
  scale: 5000,
  region: geometry.geometry().bounds(),
  skipEmptyTiles: true
}) 